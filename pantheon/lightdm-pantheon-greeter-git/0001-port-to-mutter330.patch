From 5193b7eeef2a1f8c6b75474d71e4271d8aecb6e2 Mon Sep 17 00:00:00 2001
From: lavjamanxd <lavjamanxd@gmail.com>
Date: Wed, 24 Oct 2018 20:36:46 +0200
Subject: [PATCH] port to mutter330

---
 compositor/DBusAccelerator.vala |   6 +-
 compositor/Utils.vala           |   7 +-
 compositor/Wallpaper.vala       |   6 +-
 compositor/WindowManager.vala   |  39 +++--
 compositor/meson.build          |  21 +++
 src/meson.build                 |   2 +-
 vapi/libmutter-3.deps           |   1 +
 vapi/libmutter-3.vapi           |   1 +
 vapi/libmutter.vapi             | 277 +++++++++++++++++++++++++++++++-
 vapi/mutter-clutter-3.deps      |   5 +
 vapi/mutter-clutter-3.vapi      |   1 +
 vapi/mutter-cogl-3.deps         |   1 +
 vapi/mutter-cogl-3.vapi         |   1 +
 vapi/mutter-cogl-pango-3.vapi   |   0
 vapi/mutter-cogl-path-3.vapi    |   0
 15 files changed, 335 insertions(+), 33 deletions(-)
 create mode 120000 vapi/libmutter-3.deps
 create mode 120000 vapi/libmutter-3.vapi
 create mode 100644 vapi/mutter-clutter-3.deps
 create mode 120000 vapi/mutter-clutter-3.vapi
 create mode 120000 vapi/mutter-cogl-3.deps
 create mode 120000 vapi/mutter-cogl-3.vapi
 create mode 100644 vapi/mutter-cogl-pango-3.vapi
 create mode 100644 vapi/mutter-cogl-path-3.vapi

diff --git a/compositor/DBusAccelerator.vala b/compositor/DBusAccelerator.vala
index dd549cf..ce6636e 100644
--- a/compositor/DBusAccelerator.vala
+++ b/compositor/DBusAccelerator.vala
@@ -43,7 +43,7 @@ namespace GreeterCompositor {
             wm = _wm;
             grabbed_accelerators = new HashTable<string, uint> (str_hash, str_equal);
 
-            wm.get_screen ().get_display ().accelerator_activated.connect (on_accelerator_activated);
+            wm.get_display ().accelerator_activated.connect (on_accelerator_activated);
         }
 
         void on_accelerator_activated (uint action, uint device_id, uint timestamp) {
@@ -62,7 +62,7 @@ namespace GreeterCompositor {
             uint? action = grabbed_accelerators[accelerator];
 
             if (action == null) {
-                action = wm.get_screen ().get_display ().grab_accelerator (accelerator);
+                action = wm.get_display ().grab_accelerator (accelerator);
                 if (action > 0) {
                     grabbed_accelerators[accelerator] = action;
                 }
@@ -86,7 +86,7 @@ namespace GreeterCompositor {
 
             foreach (unowned string accelerator in grabbed_accelerators.get_keys ()) {
                 if (grabbed_accelerators[accelerator] == action) {
-                    ret = wm.get_screen ().get_display ().ungrab_accelerator (action);
+                    ret = wm.get_display ().ungrab_accelerator (action);
                     grabbed_accelerators.remove (accelerator);
                     break;
                 }
diff --git a/compositor/Utils.vala b/compositor/Utils.vala
index 4774310..a7df098 100644
--- a/compositor/Utils.vala
+++ b/compositor/Utils.vala
@@ -89,8 +89,7 @@ namespace GreeterCompositor
 		 */
 		public static Meta.Window get_next_window (Meta.Workspace workspace, bool backward = false)
 		{
-			var screen = workspace.get_screen ();
-			var display = screen.get_display ();
+			var display = workspace.get_display ();
 
 			var window = display.get_tab_next (Meta.TabList.NORMAL,
 				workspace, null, backward);
@@ -170,12 +169,12 @@ namespace GreeterCompositor
 		 *
 		 * @param screen The screen to flash, if necessary
 		 */
-		public static void bell (Meta.Screen screen)
+		public static void bell (Meta.Display display)
 		{
 			if (Meta.Prefs.bell_is_audible ())
 				Gdk.beep ();
 			else
-				screen.get_display ().get_compositor ().flash_screen (screen);
+                display.get_compositor().flash_display(display);
 		}
 	}
 }
diff --git a/compositor/Wallpaper.vala b/compositor/Wallpaper.vala
index 9bda461..f991019 100644
--- a/compositor/Wallpaper.vala
+++ b/compositor/Wallpaper.vala
@@ -19,13 +19,13 @@ public class GreeterCompositor.Wallpaper : Meta.BackgroundActor {
     const Clutter.Color BLACK_COLOR = { 0, 0, 0, uint8.MAX };
     Meta.Background? wallpaper_background = null;
 
-    public Wallpaper (Meta.Screen screen) {
-        Object (meta_screen: screen, monitor: 0);
+    public Wallpaper (Meta.Display display) {
+        Object (meta_display: display, monitor: 0);
     }
 
     construct {
         if (wallpaper_background == null) {
-            wallpaper_background = new Meta.Background (meta_screen);
+            wallpaper_background = new Meta.Background (meta_display);
             wallpaper_background.set_color (BLACK_COLOR);
 
             GreeterCompositor.DBus.instance.change_wallpaper.connect ((path) => {
diff --git a/compositor/WindowManager.vala b/compositor/WindowManager.vala
index 6fe93e9..2161837 100644
--- a/compositor/WindowManager.vala
+++ b/compositor/WindowManager.vala
@@ -117,14 +117,14 @@ namespace GreeterCompositor {
         }
 
         bool show_stage () {
-            var screen = get_screen ();
+            var display = get_display ();
             MediaFeedback.init ();
             DBus.init (this);
             DBusAccelerator.init (this);
 
-            stage = Compositor.get_stage_for_screen (screen) as Clutter.Stage;
+            stage = Compositor.get_stage_for_display (display) as Clutter.Stage;
 
-            var wallpaper = new Wallpaper (screen);
+            var wallpaper = new Wallpaper (display);
             wallpaper.add_constraint (new Clutter.BindConstraint (stage,
                 Clutter.BindCoordinate.ALL, 0));
             stage.insert_child_below (wallpaper, null);
@@ -133,11 +133,11 @@ namespace GreeterCompositor {
             ui_group.reactive = true;
             stage.add_child (ui_group);
 
-            window_group = Compositor.get_window_group_for_screen (screen);
+            window_group = Compositor.get_window_group_for_display (display);
             stage.remove_child (window_group);
             ui_group.add_child (window_group);
 
-            top_window_group = Compositor.get_top_window_group_for_screen (screen);
+            top_window_group = Compositor.get_top_window_group_for_display (display);
             stage.remove_child (top_window_group);
             ui_group.add_child (top_window_group);
 
@@ -179,7 +179,7 @@ namespace GreeterCompositor {
         public uint32[] get_all_xids () {
             var list = new Gee.ArrayList<uint32> ();
 
-            foreach (var workspace in get_screen ().get_workspaces ()) {
+            foreach (var workspace in get_display().get_workspace_manager().get_workspaces ()) {
                 foreach (var window in workspace.list_windows ())
                     list.add ((uint32)window.get_xwindow ());
             }
@@ -194,15 +194,14 @@ namespace GreeterCompositor {
             if (window == null)
                 return;
 
-            var screen = get_screen ();
-            var display = screen.get_display ();
-
-            var active = screen.get_active_workspace ();
+            var display = get_display ();
+            var workspace_manager = display.get_workspace_manager();
+            var active = workspace_manager.get_active_workspace ();
             var next = active.get_neighbor (direction);
 
             //dont allow empty workspaces to be created by moving, if we have dynamic workspaces
-            if (Prefs.get_dynamic_workspaces () && Utils.get_n_windows (active) == 1 && next.index () ==  screen.n_workspaces - 1) {
-                Utils.bell (screen);
+            if (Prefs.get_dynamic_workspaces () && Utils.get_n_windows (active) == 1 && next.index () ==  workspace_manager.get_n_workspaces() - 1) {
+                Utils.bell (display);
                 return;
             }
 
@@ -236,9 +235,9 @@ namespace GreeterCompositor {
             // if that's not available.
             if (!Prefs.get_dynamic_workspaces ())
                 return;
-
-            unowned Meta.Screen screen = get_screen ();
-            var time = screen.get_display ().get_current_time ();
+            var display = get_display ();
+            var workspace_manager = display.get_workspace_manager();
+            var time = display.get_current_time ();
             unowned Meta.Workspace win_ws = window.get_workspace ();
 
             if (which_change == Meta.SizeChange.FULLSCREEN) {
@@ -250,7 +249,7 @@ namespace GreeterCompositor {
                 var new_ws_index = old_ws_index + 1;
                 //InternalUtils.insert_workspace_with_window (new_ws_index, window);
 
-                var new_ws_obj = screen.get_workspace_by_index (new_ws_index);
+                var new_ws_obj = workspace_manager.get_workspace_by_index (new_ws_index);
                 window.change_workspace (new_ws_obj);
                 new_ws_obj.activate_with_focus (window, time);
 
@@ -259,8 +258,8 @@ namespace GreeterCompositor {
                 var old_ws_index = ws_assoc.get (window);
                 var new_ws_index = win_ws.index ();
 
-                if (new_ws_index != old_ws_index && old_ws_index < screen.get_n_workspaces ()) {
-                    var old_ws_obj = screen.get_workspace_by_index (old_ws_index);
+                if (new_ws_index != old_ws_index && old_ws_index < workspace_manager.get_n_workspaces ()) {
+                    var old_ws_obj = workspace_manager.get_workspace_by_index (old_ws_index);
                     window.change_workspace (old_ws_obj);
                     old_ws_obj.activate_with_focus (window, time);
                 }
@@ -370,8 +369,8 @@ namespace GreeterCompositor {
             if (windows == null || parents == null)
                 return;
 
-            var screen = get_screen ();
-            var active_workspace = screen.get_active_workspace ();
+            var display = get_display();
+            var active_workspace = display.get_workspace_manager().get_active_workspace ();
 
             for (var i = 0; i < windows.length (); i++) {
                 var actor = windows.nth_data (i);
diff --git a/compositor/meson.build b/compositor/meson.build
index 869920f..df2ef23 100644
--- a/compositor/meson.build
+++ b/compositor/meson.build
@@ -116,6 +116,27 @@ if mutter328_dep.found()
 		'-DCOGL_ENABLE_EXPERIMENTAL_API', '-DCOGL_ENABLE_EXPERIMENTAL_2_0_API']
 endif
 
+mutter330_dep = dependency('libmutter-3', version: ['>= 3.29.4', '< 3.31'], required: false)
+if mutter330_dep.found()
+        mutter_packages_command = [
+                '--pkg', 'libmutter-3',
+                '--pkg', 'mutter-cogl-3',
+                '--pkg', 'mutter-cogl-pango-3',
+                '--pkg', 'mutter-cogl-path-3',
+                '--pkg', 'mutter-clutter-3'
+        ]
+        libmutter_dep = dependency('libmutter-3', version: '>= 3.29.4')
+        mutter_dep = [
+                libmutter_dep,
+                dependency('mutter-cogl-3'), dependency('mutter-cogl-pango-3'),
+                dependency('mutter-cogl-path-3'), dependency('mutter-clutter-3')
+        ]
+        vala_flags += ['--define', 'HAS_MUTTER320', '--define', 'HAS_MUTTER322', '--define', 'HAS_MUTTER324', 
+'--define', 'HAS_MUTTER326', '--define', 'HAS_MUTTER328', '--define', 'HAS_MUTTER330']
+        compositor_c_args = ['-DCLUTTER_ENABLE_COMPOSITOR_API', '-DCLUTTER_ENABLE_EXPERIMENTAL_API',
+                '-DCOGL_ENABLE_EXPERIMENTAL_API', '-DCOGL_ENABLE_EXPERIMENTAL_2_0_API']
+endif
+
 if mutter_dep.length() == 0
 	error ('No supported mutter library found!')
 endif
diff --git a/src/meson.build b/src/meson.build
index e5ee6e0..d75572e 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -8,7 +8,7 @@ config_header = configure_file (
     output: 'config.vala',
     configuration: conf_data
 )
-install_path = join_paths(get_option('prefix'), get_option('sbindir'))
+install_path = join_paths(get_option('prefix'), get_option('bindir'))
 
 executable(
     meson.project_name(),
diff --git a/vapi/libmutter-3.deps b/vapi/libmutter-3.deps
new file mode 120000
index 0000000..efe5ad1
--- /dev/null
+++ b/vapi/libmutter-3.deps
@@ -0,0 +1 @@
+libmutter-2.deps
\ No newline at end of file
diff --git a/vapi/libmutter-3.vapi b/vapi/libmutter-3.vapi
new file mode 120000
index 0000000..22cc238
--- /dev/null
+++ b/vapi/libmutter-3.vapi
@@ -0,0 +1 @@
+libmutter-2.vapi
\ No newline at end of file
diff --git a/vapi/libmutter.vapi b/vapi/libmutter.vapi
index e39fb94..63b732e 100644
--- a/vapi/libmutter.vapi
+++ b/vapi/libmutter.vapi
@@ -93,6 +93,10 @@ namespace Meta {
 		public static void set_ignore_request_hide_titlebar (bool whether);
 		[CCode (cheader_filename = "meta/prefs.h")]
 		public static void set_num_workspaces (int n_workspaces);
+#if HAS_MUTTER330
+		[CCode (cheader_filename = "meta/prefs.h")]
+		public static void set_show_fallback_app_menu (bool whether);
+#endif
 	}
 	namespace Util {
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_add_verbose_topic")]
@@ -101,6 +105,10 @@ namespace Meta {
 		public static void bug (string format, ...);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_debug_spew_real")]
 		public static void debug_spew_real (string format, ...);
+#if HAS_MUTTER330
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
+		public static void empty_stage_input_region (Meta.Display display);
+#else
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_disable_unredirect_for_screen")]
 		public static void disable_unredirect_for_screen (Meta.Screen screen);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_empty_stage_input_region")]
@@ -113,6 +121,7 @@ namespace Meta {
 		public static int error_trap_pop_with_return (Meta.Display display);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_error_trap_push")]
 		public static void error_trap_push (Meta.Display display);
+#endif
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_external_binding_name_for_action")]
 		public static string external_binding_name_for_action (uint keybinding_action);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_fatal")]
@@ -124,7 +133,11 @@ namespace Meta {
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_get_locale_direction")]
 		public static Meta.LocaleDirection get_locale_direction ();
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_get_overlay_window")]
+#if HAS_MUTTER330
+		public static X.Window get_overlay_window (Meta.Display display);
+#else
 		public static X.Window get_overlay_window (Meta.Screen screen);
+#endif
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_gravity_to_string")]
 		public static unowned string gravity_to_string (int gravity);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_is_debugging")]
@@ -148,7 +161,11 @@ namespace Meta {
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_remove_verbose_topic")]
 		public static void remove_verbose_topic (Meta.DebugTopic topic);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_set_stage_input_region")]
+#if HAS_MUTTER330
+		public static void set_stage_input_region (Meta.Display display, X.XserverRegion region);
+#else
 		public static void set_stage_input_region (Meta.Screen screen, X.XserverRegion region);
+#endif
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_show_dialog")]
 		public static GLib.Pid show_dialog (string type, string message, string? timeout = null, string? display = null, string? ok_text = null, string? cancel_text = null, string? icon_name = null, int transient_for = 0, GLib.SList<string>? columns = null, GLib.SList<string>? entries = null);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_topic_real")]
@@ -161,6 +178,16 @@ namespace Meta {
 		public static void verbose_real (string format, ...);
 		[CCode (cheader_filename = "meta/main.h", cname = "meta_warning")]
 		public static void warning (string format, ...);
+#if HAS_MUTTER330
+		[CCode (cheader_filename = "meta/main.h", cname = "meta_x11_error_trap_pop")]
+		public static void x11_error_trap_pop (Meta.X11Display x11_display);
+		[CCode (cheader_filename = "meta/main.h", cname = "meta_x11_error_trap_pop_with_return")]
+		public static int x11_error_trap_pop_with_return (Meta.X11Display x11_display);
+		[CCode (cheader_filename = "meta/main.h", cname = "meta_x11_error_trap_push")]
+		public static void x11_error_trap_push (Meta.X11Display x11_display);
+		[CCode (cheader_filename = "meta/main.h", cname = "meta_x11_init_gdk_display")]
+		public static bool x11_init_gdk_display () throws GLib.Error;
+#endif
 	}
 	[CCode (cheader_filename = "meta/main.h", type_id = "meta_backend_get_type ()")]
 #if HAS_MUTTER322
@@ -175,6 +202,9 @@ namespace Meta {
 #if HAS_MUTTER324
 		public unowned Meta.Dnd get_dnd ();
 #endif
+#if HAS_MUTTER330
+		public unowned Meta.RemoteAccessController get_remote_access_controller ();
+#endif
 #if HAS_MUTTER326
 		public unowned Meta.Settings get_settings ();
 #endif
@@ -187,24 +217,39 @@ namespace Meta {
 		public signal void keymap_changed ();
 		public signal void keymap_layout_group_changed (uint object);
 		public signal void last_device_changed (int object);
+#if HAS_MUTTER330
+		public signal void lid_is_closed_changed (bool object);
+#endif
 	}
-	[CCode (cheader_filename = "meta/meta-background.h", type_id = "meta_background_get_type ()")]
+	[CCode (cheader_filename = "meta/display.h,meta/meta-background.h", type_id = "meta_background_get_type ()")]
 	public class Background : GLib.Object {
 		[CCode (has_construct_function = false)]
+#if HAS_MUTTER330
+		public Background (Meta.Display display);
+#else
 		public Background (Meta.Screen screen);
+#endif
 		public static void refresh_all ();
 		public void set_blend (GLib.File file1, GLib.File file2, double blend_factor, GDesktop.BackgroundStyle style);
 		public void set_color (Clutter.Color color);
 		public void set_file (GLib.File file, GDesktop.BackgroundStyle style);
 		public void set_gradient (GDesktop.BackgroundShading shading_direction, Clutter.Color color, Clutter.Color second_color);
 		[NoAccessorMethod]
+#if HAS_MUTTER330
+		public Meta.Display meta_display { owned get; construct; }
+#else
 		public Meta.Screen meta_screen { owned get; construct; }
+#endif
 		public signal void changed ();
 	}
-	[CCode (cheader_filename = "meta/meta-background-actor.h", type_id = "meta_background_actor_get_type ()")]
+	[CCode (cheader_filename = "meta/display.h,meta/meta-background-actor.h", type_id = "meta_background_actor_get_type ()")]
 	public class BackgroundActor : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
 		[CCode (has_construct_function = false, type = "ClutterActor*")]
+#if HAS_MUTTER330
+		public BackgroundActor (Meta.Display display, int monitor);
+#else
 		public BackgroundActor (Meta.Screen screen, int monitor);
+#endif
 		public void set_background (Meta.Background background);
 #if HAS_MUTTER326
 		public void set_gradient (bool enabled, int height, double tone_start);
@@ -224,7 +269,11 @@ namespace Meta {
 		public double gradient_max_darkness { get; set; }
 #endif
 		[NoAccessorMethod]
+#if HAS_MUTTER330
+		public Meta.Display meta_display { owned get; construct; }
+#else
 		public Meta.Screen meta_screen { owned get; construct; }
+#endif
 		[NoAccessorMethod]
 		public int monitor { get; construct; }
 		[NoAccessorMethod]
@@ -295,6 +344,21 @@ namespace Meta {
 		public void add_window (Meta.Window window);
 		public void destroy ();
 		public bool filter_keybinding (Meta.KeyBinding binding);
+#if HAS_MUTTER330
+		public void flash_display (Meta.Display display);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
+		public static void focus_stage_window (Meta.Display display, uint32 timestamp);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_feedback_group_for_display")]
+		public static unowned Clutter.Actor get_feedback_group_for_display (Meta.Display display);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_stage_for_display")]
+		public static unowned Clutter.Actor? get_stage_for_display (Meta.Display display);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_top_window_group_for_display")]
+		public static unowned Clutter.Actor? get_top_window_group_for_display (Meta.Display display);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_actors")]
+		public static unowned GLib.List<weak Meta.WindowActor>? get_window_actors (Meta.Display display);
+		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_display")]
+		public static unowned Clutter.Actor? get_window_group_for_display (Meta.Display display);
+#else
 		public void flash_screen (Meta.Screen screen);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_focus_stage_window")]
 		public static void focus_stage_window (Meta.Screen screen, uint32 timestamp);
@@ -308,6 +372,7 @@ namespace Meta {
 		public static unowned GLib.List<weak Meta.WindowActor>? get_window_actors (Meta.Screen screen);
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_get_window_group_for_screen")]
 		public static unowned Clutter.Actor? get_window_group_for_screen (Meta.Screen screen);
+#endif
 		public void hide_tile_preview ();
 		public void hide_window (Meta.Window window, Meta.CompEffect effect);
 		public void manage ();
@@ -320,8 +385,10 @@ namespace Meta {
 		public void show_window_menu (Meta.Window window, Meta.WindowMenuType menu, int x, int y);
 		public void show_window_menu_for_rect (Meta.Window window, Meta.WindowMenuType menu, Meta.Rectangle rect);
 		public void size_change_window (Meta.Window window, Meta.SizeChange which_change, Meta.Rectangle old_frame_rect, Meta.Rectangle old_buffer_rect);
+#if !HAS_MUTTER328
 		[CCode (cheader_filename = "meta/compositor-mutter.h", cname = "meta_stage_is_focused")]
 		public static bool stage_is_focused (Meta.Screen screen);
+#endif
 		public void switch_workspace (Meta.Workspace from, Meta.Workspace to, Meta.MotionDirection direction);
 		public void sync_stack (GLib.List<Meta.WindowActor> stack);
 		public void sync_updates_frozen (Meta.Window window);
@@ -335,68 +402,137 @@ namespace Meta {
 	public class CursorTracker : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected CursorTracker ();
+#if HAS_MUTTER330
+		public static unowned Meta.CursorTracker get_for_display (Meta.Display display);
+#else
 		public static unowned Meta.CursorTracker get_for_screen (Meta.Screen screen);
+#endif
 		public void get_hot (out int x, out int y);
 		public void get_pointer (out int x, out int y, out Clutter.ModifierType mods);
 		public unowned Cogl.Texture get_sprite ();
 		public void set_pointer_visible (bool visible);
 		public signal void cursor_changed ();
 	}
+#if HAS_MUTTER328
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_dbus_display_config_skeleton_get_type ()")]
+	public class DBusDisplayConfigSkeleton : GLib.DBusInterfaceSkeleton, GLib.DBusInterface {
+		[CCode (has_construct_function = false)]
+		protected DBusDisplayConfigSkeleton ();
+	}
+#endif
 	[CCode (cheader_filename = "meta/display.h", type_id = "meta_display_get_type ()")]
 	public class Display : GLib.Object {
 		[CCode (has_construct_function = false)]
 		protected Display ();
 		public void add_ignored_crossing_serial (ulong serial);
 		public uint add_keybinding (string name, GLib.Settings settings, Meta.KeyBindingFlags flags, owned Meta.KeyHandlerFunc handler);
+#if HAS_MUTTER330
+		public bool begin_grab_op (Meta.Window window, Meta.GrabOp op, bool pointer_already_grabbed, bool frame_action, int button, ulong modmask, uint32 timestamp, int root_x, int root_y);
+#else
 		public bool begin_grab_op (Meta.Screen screen, Meta.Window window, Meta.GrabOp op, bool pointer_already_grabbed, bool frame_action, int button, ulong modmask, uint32 timestamp, int root_x, int root_y);
+#endif
 		public void clear_mouse_mode ();
+#if HAS_MUTTER330
+		public void close (uint32 timestamp);
+#endif
 		public void end_grab_op (uint32 timestamp);
+#if HAS_MUTTER330
+		public void focus_default_window (uint32 timestamp);
+#else
 		public void focus_the_no_focus_window (Meta.Screen screen, uint32 timestamp);
+#endif
 		public void freeze_keyboard (uint32 timestamp);
 		public unowned Meta.Compositor get_compositor ();
+#if HAS_MUTTER330
+		public int get_current_monitor ();
+#endif
 		public uint32 get_current_time ();
 		public uint32 get_current_time_roundtrip ();
+#if !HAS_MUTTER330
 		public int get_damage_event_base ();
+#endif
 		public unowned Meta.Window get_focus_window ();
 		public Meta.GrabOp get_grab_op ();
 		public uint get_keybinding_action (uint keycode, ulong mask);
 		public uint32 get_last_user_time ();
+#if HAS_MUTTER330
+		public Meta.Rectangle get_monitor_geometry (int monitor);
+		public bool get_monitor_in_fullscreen (int monitor);
+		public int get_monitor_index_for_rect (Meta.Rectangle rect);
+		public int get_monitor_neighbor_index (int which_monitor, Meta.DisplayDirection dir);
+		public int get_n_monitors ();
+#endif
 #if HAS_MUTTER322
 		public string get_pad_action_label (Clutter.InputDevice pad, Meta.PadActionType action_type, uint action_number);
 #endif
+#if HAS_MUTTER330
+		public int get_primary_monitor ();
+		public void get_size (out int width, out int height);
+		public unowned GLib.SList<void*> get_startup_sequences ();
+#else
 		public int get_shape_event_base ();
+#endif
 		public unowned Meta.Window get_tab_current (Meta.TabList type, Meta.Workspace workspace);
 		public GLib.List<weak Meta.Window> get_tab_list (Meta.TabList type, Meta.Workspace? workspace);
 		public unowned Meta.Window get_tab_next (Meta.TabList type, Meta.Workspace workspace, Meta.Window? window, bool backward);
+#if HAS_MUTTER330
+		public unowned Meta.WorkspaceManager get_workspace_manager ();
+		public unowned Meta.X11Display get_x11_display ();
+#else
 		public unowned X.Display get_xdisplay ();
 		public int get_xinput_opcode ();
+#endif
 		public uint grab_accelerator (string accelerator);
+#if !HAS_MUTTER330
 		public bool has_shape ();
+#endif
 		public bool is_pointer_emulating_sequence (Clutter.EventSequence? sequence);
+#if !HAS_MUTTER330
 		public unowned Meta.Group lookup_group (X.Window group_leader);
+#endif
 		public bool remove_keybinding (string name);
 #if HAS_MUTTER322
 		public void request_pad_osd (Clutter.InputDevice pad, bool edition_mode);
 #endif
+#if HAS_MUTTER330
+		public void set_cursor (Meta.Cursor cursor);
+#else
 		public void set_input_focus_window (Meta.Window window, bool focus_frame, uint32 timestamp);
+#endif
 		public GLib.SList<weak Meta.Window> sort_windows_by_stacking (GLib.SList<Meta.Window> windows);
 		public bool supports_extended_barriers ();
 		public void unfreeze_keyboard (uint32 timestamp);
 		public bool ungrab_accelerator (uint action_id);
 		public void ungrab_keyboard (uint32 timestamp);
+#if !HAS_MUTTER330
 		public void unmanage_screen (Meta.Screen screen, uint32 timestamp);
+#endif
 		public bool xserver_time_is_before (uint32 time1, uint32 time2);
+#if !HAS_MUTTER330
 		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
+#endif
 		public signal void accelerator_activated (uint object, uint p0, uint p1);
+#if HAS_MUTTER330
+		public signal void cursor_updated ();
+#endif
 #if HAS_MUTTER322
 		public signal void gl_video_memory_purged ();
 #endif
+#if HAS_MUTTER330
+		public signal void grab_op_begin (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
+		public signal void grab_op_end (Meta.Display object, Meta.Window p0, Meta.GrabOp p1);
+		public signal void in_fullscreen_changed ();
+#else
 		public signal void grab_op_begin (Meta.Screen object, Meta.Window p0, Meta.GrabOp p1);
 		public signal void grab_op_end (Meta.Screen object, Meta.Window p0, Meta.GrabOp p1);
+#endif
 		public signal bool modifiers_accelerator_activated ();
 		public signal void overlay_key ();
 #if HAS_MUTTER324
 		public signal void pad_mode_switch (Clutter.InputDevice object, uint p0, uint p1);
+#endif
+#if HAS_MUTTER330
+		public signal void restacked ();
 #endif
 		public signal bool restart ();
 #if HAS_MUTTER324
@@ -407,9 +543,22 @@ namespace Meta {
 #endif
 		public signal bool show_resize_popup (bool object, Meta.Rectangle p0, int p1, int p2);
 		public signal bool show_restart_message (string? message);
+#if HAS_MUTTER330
+		public signal void showing_desktop_changed ();
+		public signal void startup_sequence_changed (void* object);
+#endif
 		public signal void window_created (Meta.Window object);
 		public signal void window_demands_attention (Meta.Window object);
+#if HAS_MUTTER330
+		public signal void window_entered_monitor (int object, Meta.Window p0);
+		public signal void window_left_monitor (int object, Meta.Window p0);
+#endif
 		public signal void window_marked_urgent (Meta.Window object);
+#if HAS_MUTTER330
+		public signal void workareas_changed ();
+		public signal void x11_display_closing ();
+		public signal void x11_display_opened ();
+#endif
 	}
 #if HAS_MUTTER324
 	[CCode (cheader_filename = "meta/meta-dnd.h", type_id = "meta_dnd_get_type ()")]
@@ -459,7 +608,11 @@ namespace Meta {
 		public static bool set_custom_handler (string name, owned Meta.KeyHandlerFunc? handler);
 	}
 	[CCode (cheader_filename = "meta/meta-monitor-manager.h", type_id = "meta_monitor_manager_get_type ()")]
+#if HAS_MUTTER328
+	public abstract class MonitorManager : Meta.DBusDisplayConfigSkeleton, GLib.DBusInterface {
+#else
 	public abstract class MonitorManager : GLib.DBusInterfaceSkeleton, GLib.DBusInterface {
+#endif
 		[CCode (has_construct_function = false)]
 		protected MonitorManager ();
 #if HAS_MUTTER326
@@ -491,6 +644,8 @@ namespace Meta {
 #if HAS_MUTTER324 && !HAS_MUTTER326
 		public signal void lid_is_closed_changed ();
 #endif
+        public signal void monitors_changed ();
+		public signal void workareas_changed ();
 	}
 	[CCode (cheader_filename = "meta/meta-plugin.h", type_id = "meta_plugin_get_type ()")]
 	public abstract class Plugin : GLib.Object {
@@ -511,7 +666,11 @@ namespace Meta {
 		public void destroy_completed (Meta.WindowActor actor);
 		public void end_modal (uint32 timestamp);
 		public unowned Meta.PluginInfo? get_info ();
+#if HAS_MUTTER330
+		public unowned Meta.Display get_display ();
+#else
 		public unowned Meta.Screen get_screen ();
+#endif
 		[NoWrapper]
 		public virtual void hide_tile_preview ();
 		[NoWrapper]
@@ -553,6 +712,21 @@ namespace Meta {
 		[NoWrapper]
 		public virtual bool xevent_filter (X.Event event);
 	}
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_remote_access_controller_get_type ()")]
+	public class RemoteAccessController : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected RemoteAccessController ();
+		public signal void new_handle (Meta.RemoteAccessHandle object);
+	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_remote_access_handle_get_type ()")]
+	public class RemoteAccessHandle : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected RemoteAccessHandle ();
+		public virtual void stop ();
+		public signal void stopped ();
+	}
+#else
 	[CCode (cheader_filename = "meta/screen.h", type_id = "meta_screen_get_type ()")]
 	public class Screen : GLib.Object {
 		[CCode (has_construct_function = false)]
@@ -594,6 +768,7 @@ namespace Meta {
 		public signal void workspace_removed (int object);
 		public signal void workspace_switched (int object, int p0, Meta.MotionDirection p1);
 	}
+#endif
 #if HAS_MUTTER326
 	[CCode (cheader_filename = "meta/meta-settings.h", has_type_id = false)]
 	[Compact]
@@ -632,6 +807,18 @@ namespace Meta {
 		public bool update_area (int x, int y, int width, int height);
 		public signal void size_changed ();
 	}
+#if HAS_MUTTER328
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_stage_get_type ()")]
+	public class Stage : Clutter.Stage, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+		[CCode (has_construct_function = false)]
+		protected Stage ();
+#if HAS_MUTTER330
+		public static bool is_focused (Meta.Display display);
+#else
+		public static bool is_focused (Meta.Screen screen);
+#endif
+	}
+#endif
 	[CCode (cheader_filename = "meta/theme.h", has_type_id = false)]
 	[Compact]
 	public class Theme {
@@ -699,7 +886,9 @@ namespace Meta {
 #if HAS_MUTTER328
 		public unowned string get_sandboxed_app_id ();
 #endif
+#if !HAS_MUTTER330
 		public unowned Meta.Screen get_screen ();
+#endif
 		public uint get_stable_sequence ();
 		public unowned string get_startup_id ();
 		public unowned Meta.Window? get_tile_match ();
@@ -803,6 +992,9 @@ namespace Meta {
 		public signal void focused ();
 		public signal void position_changed ();
 		public signal void raised ();
+#if HAS_MUTTER330
+		public signal void shown ();
+#endif
 		public signal void size_changed ();
 		public signal void unmanaged ();
 		public signal void workspace_changed ();
@@ -822,8 +1014,18 @@ namespace Meta {
 		public string shadow_class { owned get; set; }
 		[NoAccessorMethod]
 		public Meta.ShadowMode shadow_mode { get; set; }
+#if HAS_MUTTER330
+		public signal void effects_completed ();
+#endif
 		public signal void first_frame ();
 	}
+#if HAS_MUTTER328
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_window_group_get_type ()")]
+	public class WindowGroup : Clutter.Actor, Atk.Implementor, Clutter.Animatable, Clutter.Container, Clutter.Scriptable {
+		[CCode (has_construct_function = false)]
+		protected WindowGroup ();
+	}
+#endif
 	[CCode (cheader_filename = "meta/meta_window_shape.h", ref_function = "meta_window_shape_ref", type_id = "meta_window_shape_get_type ()", unref_function = "meta_window_shape_unref")]
 	[Compact]
 	public class WindowShape {
@@ -843,7 +1045,11 @@ namespace Meta {
 		public void activate (uint32 timestamp);
 		public void activate_with_focus (Meta.Window focus_this, uint32 timestamp);
 		public unowned Meta.Workspace get_neighbor (Meta.MotionDirection direction);
+#if HAS_MUTTER330
+		public unowned Meta.Display get_display ();
+#else
 		public unowned Meta.Screen get_screen ();
+#endif
 		public Meta.Rectangle get_work_area_all_monitors ();
 		public Meta.Rectangle get_work_area_for_monitor (int which_monitor);
 		public int index ();
@@ -856,6 +1062,40 @@ namespace Meta {
 		public signal void window_added (Meta.Window object);
 		public signal void window_removed (Meta.Window object);
 	}
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_workspace_manager_get_type ()")]
+	public class WorkspaceManager : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected WorkspaceManager ();
+		public unowned Meta.Workspace append_new_workspace (bool activate, uint32 timestamp);
+		public unowned Meta.Workspace get_active_workspace ();
+		public int get_active_workspace_index ();
+		public int get_n_workspaces ();
+		public unowned GLib.List<Meta.Workspace> get_workspaces ();
+		public unowned Meta.Workspace get_workspace_by_index (int index);
+		public void override_workspace_layout (Meta.DisplayCorner starting_corner, bool vertical_layout, int n_rows, int n_columns);
+		public void remove_workspace (Meta.Workspace workspace, uint32 timestamp);
+		public int n_workspaces { get; }
+		public signal void active_workspace_changed ();
+		public signal void showing_desktop_changed ();
+		public signal void workspace_added (int object);
+		public signal void workspace_removed (int object);
+		public signal void workspace_switched (int object, int p0, Meta.MotionDirection p1);
+	}
+	[CCode (cheader_filename = "meta/main.h", type_id = "meta_x11_display_get_type ()")]
+	public class X11Display : GLib.Object {
+		[CCode (has_construct_function = false)]
+		protected X11Display ();
+		public void focus_the_no_focus_window (uint32 timestamp);
+		public int get_damage_event_base ();
+		public int get_screen_number ();
+		public int get_shape_event_base ();
+		public bool has_shape ();
+		public void set_cm_selection ();
+		public void set_input_focus_window (Meta.Window window, bool focus_frame, uint32 timestamp);
+		public bool xwindow_is_a_no_focus_window (X.Window xwindow);
+	}
+#endif
 #if HAS_MUTTER326
 	[CCode (cheader_filename = "meta/main.h", type_cname = "MetaInhibitShortcutsDialogInterface", type_id = "meta_inhibit_shortcuts_dialog_get_type ()")]
 	public interface InhibitShortcutsDialog : GLib.Object {
@@ -1049,6 +1289,22 @@ namespace Meta {
 		HORIZONTAL,
 		VERTICAL
 	}
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DISPLAY_", type_id = "meta_display_corner_get_type ()")]
+	public enum DisplayCorner {
+		TOPLEFT,
+		TOPRIGHT,
+		BOTTOMLEFT,
+		BOTTOMRIGHT
+	}
+	[CCode (cheader_filename = "meta/main.h", cprefix = "META_DISPLAY_", type_id = "meta_display_direction_get_type ()")]
+	public enum DisplayDirection {
+		UP,
+		DOWN,
+		LEFT,
+		RIGHT
+	}
+#endif
 	[CCode (cheader_filename = "meta/boxes.h", cprefix = "META_EDGE_", type_id = "meta_edge_type_get_type ()")]
 	public enum EdgeType {
 		WINDOW,
@@ -1331,6 +1587,7 @@ namespace Meta {
 		[CCode (cheader_filename = "meta/main.h")]
 		public unowned string to_string ();
 	}
+#if !HAS_MUTTER330
 	[CCode (cheader_filename = "meta/screen.h", cprefix = "META_SCREEN_", type_id = "meta_screen_corner_get_type ()")]
 	public enum ScreenCorner {
 		TOPLEFT,
@@ -1345,6 +1602,7 @@ namespace Meta {
 		LEFT,
 		RIGHT
 	}
+#endif
 	[CCode (cheader_filename = "meta/meta-enum-types.h", cprefix = "META_SHADOW_MODE_", type_id = "meta_shadow_mode_get_type ()")]
 	public enum ShadowMode {
 		AUTO,
@@ -1438,12 +1696,21 @@ namespace Meta {
 	}
 	[CCode (cheader_filename = "meta/meta-idle-monitor.h", instance_pos = 2.9)]
 	public delegate void IdleMonitorWatchFunc (Meta.IdleMonitor monitor, uint watch_id);
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 4.9)]
+	public delegate void KeyHandlerFunc (Meta.Display display, Meta.Window? window, Clutter.KeyEvent? event, Meta.KeyBinding binding);
+#else
 	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 5.9)]
 	public delegate void KeyHandlerFunc (Meta.Display display, Meta.Screen screen, Meta.Window? window, Clutter.KeyEvent? event, Meta.KeyBinding binding);
+#endif
 	[CCode (cheader_filename = "meta/prefs.h", instance_pos = 1.9)]
 	public delegate void PrefsChangedFunc (Meta.Preference pref);
 	[CCode (cheader_filename = "meta/window.h", instance_pos = 1.9)]
 	public delegate bool WindowForeachFunc (Meta.Window window);
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/main.h", cname = "META_CURRENT_TIME")]
+	public const int CURRENT_TIME;
+#endif
 	[CCode (cheader_filename = "meta/main.h", cname = "META_DEFAULT_ICON_NAME")]
 	public const string DEFAULT_ICON_NAME;
 	[CCode (cheader_filename = "meta/main.h", cname = "META_ICON_HEIGHT")]
@@ -1478,6 +1745,12 @@ namespace Meta {
 	public static bool activate_session ();
  	[CCode (cheader_filename = "meta/main.h")]
 	public static void clutter_init ();
+#if HAS_MUTTER330
+	[CCode (cheader_filename = "meta/main.h")]
+	public static void disable_unredirect_for_display (Meta.Display display);
+	[CCode (cheader_filename = "meta/main.h")]
+	public static void enable_unredirect_for_display (Meta.Display display);
+#endif
 	[CCode (cheader_filename = "meta/main.h")]
 	public static void exit (Meta.ExitCode code);
 	[CCode (cheader_filename = "meta/main.h")]
diff --git a/vapi/mutter-clutter-3.deps b/vapi/mutter-clutter-3.deps
new file mode 100644
index 0000000..687b763
--- /dev/null
+++ b/vapi/mutter-clutter-3.deps
@@ -0,0 +1,5 @@
+atk
+cairo
+pango
+json-glib-1.0
+mutter-cogl-3
diff --git a/vapi/mutter-clutter-3.vapi b/vapi/mutter-clutter-3.vapi
new file mode 120000
index 0000000..cb676dc
--- /dev/null
+++ b/vapi/mutter-clutter-3.vapi
@@ -0,0 +1 @@
+mutter-clutter-2.vapi
\ No newline at end of file
diff --git a/vapi/mutter-cogl-3.deps b/vapi/mutter-cogl-3.deps
new file mode 120000
index 0000000..c6bf5df
--- /dev/null
+++ b/vapi/mutter-cogl-3.deps
@@ -0,0 +1 @@
+mutter-cogl-2.deps
\ No newline at end of file
diff --git a/vapi/mutter-cogl-3.vapi b/vapi/mutter-cogl-3.vapi
new file mode 120000
index 0000000..6cf832e
--- /dev/null
+++ b/vapi/mutter-cogl-3.vapi
@@ -0,0 +1 @@
+mutter-cogl-2.vapi
\ No newline at end of file
diff --git a/vapi/mutter-cogl-pango-3.vapi b/vapi/mutter-cogl-pango-3.vapi
new file mode 100644
index 0000000..e69de29
diff --git a/vapi/mutter-cogl-path-3.vapi b/vapi/mutter-cogl-path-3.vapi
new file mode 100644
index 0000000..e69de29
-- 
2.19.1

